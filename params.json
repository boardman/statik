{"name":"Statik","body":"# Statik\r\n\r\nA simple and easy-to-use Node.js module to server static files over HTTP. It's\r\nsuper simple to use it.\r\n\r\n## Command line usage\r\n\r\n```bash\r\n$ npm install -g statik\r\n$ cd ~/Sites\r\n$ statik\r\n```\r\n\r\nThen head to [http://localhost:1203/](http://localhost:1203/) to see the\r\ncontents of `./public` served over HTTP.\r\n\r\n### Customise the default directory and port\r\n\r\n```bash\r\n// Start server at http://localhost:3000 serving ./public\r\n$ static --port 3000\r\n\r\n// Start server at http://localhost:3000 serving ~/Sites/project\r\n$ statik --port 3000 ~/Sites/project\r\n```\r\n\r\n## npm\r\n\r\n```javascript\r\n// package.json\r\n// ...\r\ndependencies: {\r\n\t\"statik\": \">= 1.1.0\"\r\n}\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\n// app.js\r\nvar statik = require('statik');\r\nvar server = statik.createServer();\r\nserver.listen(3000);\r\n```\r\n\r\nYour server will be running on [http://localhost:3000/](http://localhost:3000/)\r\nserving `./public` directory.\r\n\r\n## Customisations\r\n\r\nYou can specify the directory you wish to serve as an argument.\r\n\r\n```javascript\r\n// app.js\r\nvar statik = require('statik');\r\nvar server = statik.createServer('/Users/hongymagic/Sites');\r\nserver.listen();\r\n```\r\n\r\nYour server will be running on [http://localhost:1203/](http://localhost:1203/)\r\nserver `/Users/hongymagic/sites` directory.\r\n\r\n## Running it on heroku\r\n\r\n```bash\r\n$ echo 'web: node app.js' > Procfile\r\n$ heroku create --stack cedar statik-app\r\n$ git push heroku master\r\n$ heroku open\r\n```\r\n\r\nBAM!\r\n\r\n## FAQ\r\n\r\n### Why?\r\n\r\n> Because I hate `file://` protocol for the reasons I wish not to disclose. One\r\nof the recent ones I've come across is [Typekit](http://help.typekit.com/customer/portal/articles/6857-using-typekit-while-developing-locally).\r\nAnd trust me there are other problems that pop-up if you're primarily working\r\nfor the `http://` protocol.\r\n\r\n### What about the HTTP Headers?\r\n\r\n> There are some default HTTP Headers that I am going to introduce for the reaons\r\nwhy I have create this package in the first place:\r\n\r\n> 1. Content-Type: statik uses another internal Node.js package `mime` to check\r\nagainst content types\r\n> 2. Cache-Control: 'no-cache'. The primary purpose of statik was so I could easily\r\nrun a folder as web server over HTTP while I'm working on a new site. Might as\r\nwell kill off the cache while I'm writing and debugging CSS and JavaScript. There\r\nwill be an option to disable to default behaviour though.\r\n\r\n### Why default to port 1203?\r\n\r\n> It's all personal.\r\n\r\n### How does statik treat root `/`?\r\n\r\n> For now, it will translate that into `index.html`\r\n\r\n## TODO\r\n\r\n1. Clean up code around 404 and 500 errors\r\n2. Options to add/remove default HTTP headers\r\n3. Default set of files instead of `index.html`\r\n4. Remove that `requestHandler` crap\r\n","tagline":"A simple and easy-to-use static file server written on Node.js.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}